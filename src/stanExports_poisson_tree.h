// Generated by rstantools.  Do not edit by hand.

/*
    rtreefit is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rtreefit is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rtreefit.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_poisson_tree_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 135> locations_array__ =
  {" (found before start of program)",
  " (in 'poisson_tree', line 108, column 2 to column 42)",
  " (in 'poisson_tree', line 109, column 2 to column 39)",
  " (in 'poisson_tree', line 110, column 2 to column 44)",
  " (in 'poisson_tree', line 111, column 2 to column 33)",
  " (in 'poisson_tree', line 112, column 2 to column 56)",
  " (in 'poisson_tree', line 115, column 2 to column 66)",
  " (in 'poisson_tree', line 138, column 2 to column 15)",
  " (in 'poisson_tree', line 140, column 2 to column 48)",
  " (in 'poisson_tree', line 118, column 9 to column 10)",
  " (in 'poisson_tree', line 118, column 2 to column 14)",
  " (in 'poisson_tree', line 119, column 9 to column 10)",
  " (in 'poisson_tree', line 119, column 2 to column 15)",
  " (in 'poisson_tree', line 120, column 9 to column 10)",
  " (in 'poisson_tree', line 120, column 2 to column 30)",
  " (in 'poisson_tree', line 121, column 9 to column 10)",
  " (in 'poisson_tree', line 121, column 2 to column 16)",
  " (in 'poisson_tree', line 122, column 9 to column 10)",
  " (in 'poisson_tree', line 122, column 2 to column 16)",
  " (in 'poisson_tree', line 123, column 2 to column 24)",
  " (in 'poisson_tree', line 124, column 2 to column 54)",
  " (in 'poisson_tree', line 125, column 2 to column 31)",
  " (in 'poisson_tree', line 129, column 4 to column 31)",
  " (in 'poisson_tree', line 127, column 25 to line 130, column 3)",
  " (in 'poisson_tree', line 127, column 2 to line 130, column 3)",
  " (in 'poisson_tree', line 131, column 2 to column 46)",
  " (in 'poisson_tree', line 133, column 2 to column 47)",
  " (in 'poisson_tree', line 134, column 2 to column 124)",
  " (in 'poisson_tree', line 135, column 2 to column 43)",
  " (in 'poisson_tree', line 87, column 2 to column 8)",
  " (in 'poisson_tree', line 88, column 2 to column 11)",
  " (in 'poisson_tree', line 89, column 2 to column 14)",
  " (in 'poisson_tree', line 90, column 16 to column 17)",
  " (in 'poisson_tree', line 90, column 2 to column 19)",
  " (in 'poisson_tree', line 91, column 11 to column 12)",
  " (in 'poisson_tree', line 91, column 2 to column 14)",
  " (in 'poisson_tree', line 92, column 19 to column 20)",
  " (in 'poisson_tree', line 92, column 2 to column 22)",
  " (in 'poisson_tree', line 93, column 12 to column 13)",
  " (in 'poisson_tree', line 93, column 2 to column 15)",
  " (in 'poisson_tree', line 94, column 13 to column 14)",
  " (in 'poisson_tree', line 94, column 2 to column 16)",
  " (in 'poisson_tree', line 95, column 9 to column 10)",
  " (in 'poisson_tree', line 95, column 2 to column 14)",
  " (in 'poisson_tree', line 96, column 8 to column 9)",
  " (in 'poisson_tree', line 96, column 2 to column 11)",
  " (in 'poisson_tree', line 97, column 9 to column 13)",
  " (in 'poisson_tree', line 97, column 2 to column 15)",
  " (in 'poisson_tree', line 98, column 9 to column 13)",
  " (in 'poisson_tree', line 98, column 2 to column 17)",
  " (in 'poisson_tree', line 99, column 9 to column 13)",
  " (in 'poisson_tree', line 99, column 2 to column 29)",
  " (in 'poisson_tree', line 100, column 20 to column 29)",
  " (in 'poisson_tree', line 100, column 2 to column 31)",
  " (in 'poisson_tree', line 101, column 2 to column 18)",
  " (in 'poisson_tree', line 102, column 2 to column 29)",
  " (in 'poisson_tree', line 103, column 9 to column 18)",
  " (in 'poisson_tree', line 103, column 2 to column 29)",
  " (in 'poisson_tree', line 104, column 9 to column 18)",
  " (in 'poisson_tree', line 104, column 2 to column 29)",
  " (in 'poisson_tree', line 108, column 36 to column 40)",
  " (in 'poisson_tree', line 109, column 34 to column 35)",
  " (in 'poisson_tree', line 110, column 28 to column 35)",
  " (in 'poisson_tree', line 112, column 38 to column 47)",
  " (in 'poisson_tree', line 115, column 9 to column 18)",
  " (in 'poisson_tree', line 138, column 9 to column 10)",
  " (in 'poisson_tree', line 8, column 6 to column 18)",
  " (in 'poisson_tree', line 10, column 8 to column 20)",
  " (in 'poisson_tree', line 9, column 17 to line 11, column 7)",
  " (in 'poisson_tree', line 9, column 6 to line 11, column 7)",
  " (in 'poisson_tree', line 21, column 8 to column 19)",
  " (in 'poisson_tree', line 22, column 8 to column 16)",
  " (in 'poisson_tree', line 24, column 10 to column 25)",
  " (in 'poisson_tree', line 25, column 10 to column 57)",
  " (in 'poisson_tree', line 23, column 30 to line 26, column 9)",
  " (in 'poisson_tree', line 23, column 8 to line 26, column 9)",
  " (in 'poisson_tree', line 34, column 10 to column 36)",
  " (in 'poisson_tree', line 32, column 13 to line 35, column 9)",
  " (in 'poisson_tree', line 29, column 10 to column 36)",
  " (in 'poisson_tree', line 31, column 10 to column 35)",
  " (in 'poisson_tree', line 27, column 22 to line 32, column 9)",
  " (in 'poisson_tree', line 27, column 8 to line 35, column 9)",
  " (in 'poisson_tree', line 20, column 11 to line 37, column 7)",
  " (in 'poisson_tree', line 18, column 10 to column 43)",
  " (in 'poisson_tree', line 16, column 13 to line 19, column 9)",
  " (in 'poisson_tree', line 15, column 10 to column 32)",
  " (in 'poisson_tree', line 13, column 21 to line 16, column 9)",
  " (in 'poisson_tree', line 13, column 8 to line 19, column 9)",
  " (in 'poisson_tree', line 12, column 24 to line 20, column 7)",
  " (in 'poisson_tree', line 12, column 6 to line 37, column 7)",
  " (in 'poisson_tree', line 7, column 91 to line 38, column 5)",
  " (in 'poisson_tree', line 41, column 8 to column 16)",
  " (in 'poisson_tree', line 42, column 15 to column 16)",
  " (in 'poisson_tree', line 42, column 8 to column 18)",
  " (in 'poisson_tree', line 44, column 10 to column 18)",
  " (in 'poisson_tree', line 43, column 21 to line 45, column 9)",
  " (in 'poisson_tree', line 43, column 8 to line 45, column 9)",
  " (in 'poisson_tree', line 47, column 10 to column 57)",
  " (in 'poisson_tree', line 46, column 22 to line 48, column 9)",
  " (in 'poisson_tree', line 46, column 8 to line 48, column 9)",
  " (in 'poisson_tree', line 49, column 8 to column 28)",
  " (in 'poisson_tree', line 40, column 85 to line 50, column 7)",
  " (in 'poisson_tree', line 52, column 8 to column 88)",
  " (in 'poisson_tree', line 51, column 72 to line 53, column 7)",
  " (in 'poisson_tree', line 55, column 8 to column 37)",
  " (in 'poisson_tree', line 56, column 8 to column 28)",
  " (in 'poisson_tree', line 57, column 8 to column 26)",
  " (in 'poisson_tree', line 58, column 8 to column 18)",
  " (in 'poisson_tree', line 59, column 8 to column 14)",
  " (in 'poisson_tree', line 60, column 15 to column 16)",
  " (in 'poisson_tree', line 60, column 8 to column 21)",
  " (in 'poisson_tree', line 62, column 10 to column 19)",
  " (in 'poisson_tree', line 61, column 21 to line 63, column 9)",
  " (in 'poisson_tree', line 61, column 8 to line 63, column 9)",
  " (in 'poisson_tree', line 65, column 10 to column 25)",
  " (in 'poisson_tree', line 66, column 10 to column 17)",
  " (in 'poisson_tree', line 72, column 14 to column 25)",
  " (in 'poisson_tree', line 73, column 14 to column 29)",
  " (in 'poisson_tree', line 71, column 17 to line 74, column 13)",
  " (in 'poisson_tree', line 69, column 14 to column 31)",
  " (in 'poisson_tree', line 70, column 14 to column 19)",
  " (in 'poisson_tree', line 68, column 23 to line 71, column 13)",
  " (in 'poisson_tree', line 68, column 12 to line 74, column 13)",
  " (in 'poisson_tree', line 67, column 20 to line 75, column 11)",
  " (in 'poisson_tree', line 67, column 10 to line 75, column 11)",
  " (in 'poisson_tree', line 76, column 10 to column 19)",
  " (in 'poisson_tree', line 64, column 21 to line 77, column 9)",
  " (in 'poisson_tree', line 64, column 8 to line 77, column 9)",
  " (in 'poisson_tree', line 80, column 10 to column 60)",
  " (in 'poisson_tree', line 79, column 22 to line 81, column 11)",
  " (in 'poisson_tree', line 79, column 10 to line 81, column 11)",
  " (in 'poisson_tree', line 78, column 21 to line 82, column 9)",
  " (in 'poisson_tree', line 78, column 8 to line 82, column 9)",
  " (in 'poisson_tree', line 83, column 8 to column 55)",
  " (in 'poisson_tree', line 54, column 64 to line 84, column 7)"};
template <typename T0__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
stan::promote_args_t<T0__, T3__, T4__>
x_to_t2(const std::vector<T0__>& x, const std::vector<int>& parentidx,
        const std::vector<int>& xidx, const std::vector<T3__>& tip_min_age,
        const std::vector<T4__>& t, const int& i, std::ostream* pstream__);
template <typename T0__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, T3__>,-1,1>
x_to_t(const std::vector<T0__>& x, const std::vector<int>& parentidx,
       const std::vector<int>& xidx, const std::vector<T3__>& tip_min_age,
       const int& n, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>>,-1,1>
logisticMean(const T0__& L, const T1__& k, const T2__& midpoint, const T3__&
             a_arg__, const T4__& b_arg__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
getExtraLambdaRates(const T0__& t_arg__, const std::vector<int>& parentidx,
                    const int& N, std::ostream* pstream__);
template <typename T0__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
stan::promote_args_t<T0__, T3__, T4__>
x_to_t2(const std::vector<T0__>& x, const std::vector<int>& parentidx,
        const std::vector<int>& xidx, const std::vector<T3__>& tip_min_age,
        const std::vector<T4__>& t, const int& i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__, T4__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ factor = DUMMY_VAR__;
    current_statement__ = 69;
    if (stan::math::logical_gte(
          stan::model::rvalue(t, "t", stan::model::index_uni(i)), 0)) {
      current_statement__ = 67;
      return stan::model::rvalue(t, "t", stan::model::index_uni(i));
    }
    current_statement__ = 89;
    if (stan::math::logical_lt(
          stan::model::rvalue(parentidx, "parentidx",
            stan::model::index_uni(i)), 1)) {
      current_statement__ = 87;
      if (stan::math::logical_lt(
            stan::model::rvalue(xidx, "xidx", stan::model::index_uni(i)), 1)) {
        current_statement__ = 85;
        return stan::model::rvalue(tip_min_age, "tip_min_age",
                 stan::model::index_uni(i));
      } else {
        current_statement__ = 83;
        return (stan::model::rvalue(x, "x",
                  stan::model::index_uni(
                    stan::model::rvalue(xidx, "xidx",
                      stan::model::index_uni(i))))
               *
               stan::model::rvalue(tip_min_age, "tip_min_age",
                 stan::model::index_uni(i)));
      }
    } else {
      local_scalar_t__ tmp = DUMMY_VAR__;
      current_statement__ = 70;
      tmp = 0;
      int k = std::numeric_limits<int>::min();
      current_statement__ = 71;
      k = i;
      current_statement__ = 75;
      while (stan::math::logical_gte(
               stan::model::rvalue(parentidx, "parentidx",
                 stan::model::index_uni(k)), 1)) {
        current_statement__ = 72;
        k = stan::model::rvalue(parentidx, "parentidx",
              stan::model::index_uni(k));
        current_statement__ = 73;
        tmp = (tmp +
          x_to_t2(x, parentidx, xidx, tip_min_age, t, k, pstream__));
      }
      current_statement__ = 81;
      if (stan::math::logical_gte(
            stan::model::rvalue(xidx, "xidx", stan::model::index_uni(i)), 1)) {
        current_statement__ = 78;
        factor = (stan::model::rvalue(tip_min_age, "tip_min_age",
                    stan::model::index_uni(i))
          - tmp);
        current_statement__ = 79;
        return (stan::model::rvalue(x, "x",
                  stan::model::index_uni(
                    stan::model::rvalue(xidx, "xidx",
                      stan::model::index_uni(i))))
               * factor);
      } else {
        current_statement__ = 76;
        return (stan::model::rvalue(tip_min_age, "tip_min_age",
                  stan::model::index_uni(i))
               - tmp);
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T3__>,-1,1>
x_to_t(const std::vector<T0__>& x, const std::vector<int>& parentidx,
       const std::vector<int>& xidx, const std::vector<T3__>& tip_min_age,
       const int& n, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N = std::numeric_limits<int>::min();
    current_statement__ = 91;
    N = n;
    current_statement__ = 92;
    stan::math::validate_non_negative_index("t", "N", N);
    std::vector<local_scalar_t__> t =
      std::vector<local_scalar_t__>(N, DUMMY_VAR__);
    current_statement__ = 96;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 94;
      stan::model::assign(t, -1, "assigning variable t",
        stan::model::index_uni(i));
    }
    current_statement__ = 99;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 97;
      stan::model::assign(t,
        x_to_t2(x, parentidx, xidx, tip_min_age, t, i, pstream__),
        "assigning variable t", stan::model::index_uni(i));
    }
    current_statement__ = 100;
    return stan::math::to_vector(t);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>>,-1,1>
logisticMean(const T0__& L, const T1__& k, const T2__& midpoint, const T3__&
             a_arg__, const T4__& b_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& a = stan::math::to_ref(a_arg__);
  const auto& b = stan::math::to_ref(b_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 102;
    return stan::math::elt_divide(
             stan::math::multiply((L / k),
               stan::math::subtract(
                 stan::math::log(
                   stan::math::add(1,
                     stan::math::exp(
                       stan::math::multiply(k,
                         stan::math::subtract(b, midpoint))))),
                 stan::math::log(
                   stan::math::add(1,
                     stan::math::exp(
                       stan::math::multiply(k,
                         stan::math::subtract(a, midpoint))))))),
             stan::math::subtract(b, a));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
getExtraLambdaRates(const T0__& t_arg__, const std::vector<int>& parentidx,
                    const int& N, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& t = stan::math::to_ref(t_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ extralambda = DUMMY_VAR__;
    current_statement__ = 104;
    extralambda = 149.1968140;
    local_scalar_t__ kg = DUMMY_VAR__;
    current_statement__ = 105;
    kg = -50.0161248;
    local_scalar_t__ mp = DUMMY_VAR__;
    current_statement__ = 106;
    mp = 0.2246393;
    local_scalar_t__ ct = DUMMY_VAR__;
    current_statement__ = 107;
    ct = 0;
    int k = std::numeric_limits<int>::min();
    current_statement__ = 109;
    stan::math::validate_non_negative_index("t0", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> t0 =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    current_statement__ = 113;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 111;
      stan::model::assign(t0, -1, "assigning variable t0",
        stan::model::index_uni(i));
    }
    current_statement__ = 127;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 114;
      k = stan::model::rvalue(parentidx, "parentidx",
            stan::model::index_uni(i));
      current_statement__ = 115;
      ct = 0.0;
      current_statement__ = 124;
      while (stan::math::logical_gt(k, 0)) {
        current_statement__ = 122;
        if (stan::math::logical_gt(
              stan::model::rvalue(t0, "t0", stan::model::index_uni(k)), 0)) {
          current_statement__ = 119;
          ct = ((ct +
            stan::model::rvalue(t0, "t0", stan::model::index_uni(k))) +
            stan::model::rvalue(t, "t", stan::model::index_uni(k)));
          current_statement__ = 120;
          k = -1;
        } else {
          current_statement__ = 116;
          ct = (ct + stan::model::rvalue(t, "t", stan::model::index_uni(k)));
          current_statement__ = 117;
          k = stan::model::rvalue(parentidx, "parentidx",
                stan::model::index_uni(k));
        }
      }
      current_statement__ = 125;
      stan::model::assign(t0, ct, "assigning variable t0",
        stan::model::index_uni(i));
    }
    current_statement__ = 132;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 130;
      if (stan::math::logical_lt(
            stan::model::rvalue(t0, "t0", stan::model::index_uni(i)), 0)) {
        current_statement__ = 128;
        std::stringstream errmsg_stream__;
        stan::math::stan_print(&errmsg_stream__,
          "x must not be negative; found x=");
        stan::math::stan_print(&errmsg_stream__,
          stan::model::rvalue(t0, "t0", stan::model::index_uni(i)));
        throw std::domain_error(errmsg_stream__.str());
      }
    }
    current_statement__ = 133;
    return logisticMean(extralambda, kg, mp, t0, stan::math::add(t0, t),
             pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_poisson_tree final : public model_base_crtp<model_poisson_tree> {
private:
  int N;
  int NINT;
  int NLAMBDA;
  std::vector<int> parentidx;
  std::vector<int> xidx;
  std::vector<double> tip_min_age;
  std::vector<int> rates;
  std::vector<int> ratesp;
  Eigen::Matrix<double,-1,1> s_data__;
  std::vector<int> m;
  std::vector<int> nh;
  Eigen::Matrix<double,-1,1> q_data__;
  Eigen::Matrix<double,-1,1> concentration_data__;
  std::vector<int> idxcrossover;
  double lambda_est;
  double early_growth_model_on;
  Eigen::Matrix<double,-1,1> lb_xover_data__;
  Eigen::Matrix<double,-1,1> ub_xover_data__;
  int x0_raw_1dim__;
  int x0_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> s{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> q{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> concentration{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> lb_xover{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ub_xover{nullptr, 0};
public:
  ~model_poisson_tree() {}
  model_poisson_tree(stan::io::var_context& context__, unsigned int
                     random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_poisson_tree_namespace::model_poisson_tree";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 29;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 29;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 30;
      context__.validate_dims("data initialization", "NINT", "int",
        std::vector<size_t>{});
      NINT = std::numeric_limits<int>::min();
      current_statement__ = 30;
      NINT = context__.vals_i("NINT")[(1 - 1)];
      current_statement__ = 31;
      context__.validate_dims("data initialization", "NLAMBDA", "int",
        std::vector<size_t>{});
      NLAMBDA = std::numeric_limits<int>::min();
      current_statement__ = 31;
      NLAMBDA = context__.vals_i("NLAMBDA")[(1 - 1)];
      current_statement__ = 32;
      stan::math::validate_non_negative_index("parentidx", "N", N);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "parentidx", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      parentidx = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 33;
      parentidx = context__.vals_i("parentidx");
      current_statement__ = 34;
      stan::math::validate_non_negative_index("xidx", "N", N);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "xidx", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      xidx = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 35;
      xidx = context__.vals_i("xidx");
      current_statement__ = 36;
      stan::math::validate_non_negative_index("tip_min_age", "N", N);
      current_statement__ = 37;
      context__.validate_dims("data initialization", "tip_min_age", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      tip_min_age = std::vector<double>(N,
                      std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 37;
      tip_min_age = context__.vals_r("tip_min_age");
      current_statement__ = 38;
      stan::math::validate_non_negative_index("rates", "N", N);
      current_statement__ = 39;
      context__.validate_dims("data initialization", "rates", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      rates = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 39;
      rates = context__.vals_i("rates");
      current_statement__ = 40;
      stan::math::validate_non_negative_index("ratesp", "N", N);
      current_statement__ = 41;
      context__.validate_dims("data initialization", "ratesp", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      ratesp = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 41;
      ratesp = context__.vals_i("ratesp");
      current_statement__ = 42;
      stan::math::validate_non_negative_index("s", "N", N);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "s", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      s_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&s) Eigen::Map<Eigen::Matrix<double,-1,1>>(s_data__.data(), N);
      {
        std::vector<local_scalar_t__> s_flat__;
        current_statement__ = 43;
        s_flat__ = context__.vals_r("s");
        current_statement__ = 43;
        pos__ = 1;
        current_statement__ = 43;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 43;
          stan::model::assign(s, s_flat__[(pos__ - 1)],
            "assigning variable s", stan::model::index_uni(sym1__));
          current_statement__ = 43;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 44;
      stan::math::validate_non_negative_index("m", "N", N);
      current_statement__ = 45;
      context__.validate_dims("data initialization", "m", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      m = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 45;
      m = context__.vals_i("m");
      current_statement__ = 46;
      stan::math::validate_non_negative_index("nh", "NINT", NINT);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "nh", "int",
        std::vector<size_t>{static_cast<size_t>(NINT)});
      nh = std::vector<int>(NINT, std::numeric_limits<int>::min());
      current_statement__ = 47;
      nh = context__.vals_i("nh");
      current_statement__ = 48;
      stan::math::validate_non_negative_index("q", "NINT", NINT);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "q", "double",
        std::vector<size_t>{static_cast<size_t>(NINT)});
      q_data__ = Eigen::Matrix<double,-1,1>::Constant(NINT,
                   std::numeric_limits<double>::quiet_NaN());
      new (&q) Eigen::Map<Eigen::Matrix<double,-1,1>>(q_data__.data(), NINT);
      {
        std::vector<local_scalar_t__> q_flat__;
        current_statement__ = 49;
        q_flat__ = context__.vals_r("q");
        current_statement__ = 49;
        pos__ = 1;
        current_statement__ = 49;
        for (int sym1__ = 1; sym1__ <= NINT; ++sym1__) {
          current_statement__ = 49;
          stan::model::assign(q, q_flat__[(pos__ - 1)],
            "assigning variable q", stan::model::index_uni(sym1__));
          current_statement__ = 49;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 50;
      stan::math::validate_non_negative_index("concentration", "NINT", NINT);
      current_statement__ = 51;
      context__.validate_dims("data initialization", "concentration",
        "double", std::vector<size_t>{static_cast<size_t>(NINT)});
      concentration_data__ = Eigen::Matrix<double,-1,1>::Constant(NINT,
                               std::numeric_limits<double>::quiet_NaN());
      new (&concentration)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(concentration_data__.data(),
        NINT);
      {
        std::vector<local_scalar_t__> concentration_flat__;
        current_statement__ = 51;
        concentration_flat__ = context__.vals_r("concentration");
        current_statement__ = 51;
        pos__ = 1;
        current_statement__ = 51;
        for (int sym1__ = 1; sym1__ <= NINT; ++sym1__) {
          current_statement__ = 51;
          stan::model::assign(concentration, concentration_flat__[(pos__ -
            1)], "assigning variable concentration",
            stan::model::index_uni(sym1__));
          current_statement__ = 51;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 52;
      stan::math::validate_non_negative_index("idxcrossover", "NLAMBDA - 1",
        (NLAMBDA - 1));
      current_statement__ = 53;
      context__.validate_dims("data initialization", "idxcrossover", "int",
        std::vector<size_t>{static_cast<size_t>((NLAMBDA - 1))});
      idxcrossover = std::vector<int>((NLAMBDA - 1),
                       std::numeric_limits<int>::min());
      current_statement__ = 53;
      idxcrossover = context__.vals_i("idxcrossover");
      current_statement__ = 54;
      context__.validate_dims("data initialization", "lambda_est", "double",
        std::vector<size_t>{});
      lambda_est = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 54;
      lambda_est = context__.vals_r("lambda_est")[(1 - 1)];
      current_statement__ = 55;
      context__.validate_dims("data initialization", "early_growth_model_on",
        "double", std::vector<size_t>{});
      early_growth_model_on = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 55;
      early_growth_model_on = context__.vals_r("early_growth_model_on")[(1 -
        1)];
      current_statement__ = 56;
      stan::math::validate_non_negative_index("lb_xover", "NLAMBDA - 1",
        (NLAMBDA - 1));
      current_statement__ = 57;
      context__.validate_dims("data initialization", "lb_xover", "double",
        std::vector<size_t>{static_cast<size_t>((NLAMBDA - 1))});
      lb_xover_data__ = Eigen::Matrix<double,-1,1>::Constant((NLAMBDA - 1),
                          std::numeric_limits<double>::quiet_NaN());
      new (&lb_xover)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(lb_xover_data__.data(),
        (NLAMBDA - 1));
      {
        std::vector<local_scalar_t__> lb_xover_flat__;
        current_statement__ = 57;
        lb_xover_flat__ = context__.vals_r("lb_xover");
        current_statement__ = 57;
        pos__ = 1;
        current_statement__ = 57;
        for (int sym1__ = 1; sym1__ <= (NLAMBDA - 1); ++sym1__) {
          current_statement__ = 57;
          stan::model::assign(lb_xover, lb_xover_flat__[(pos__ - 1)],
            "assigning variable lb_xover", stan::model::index_uni(sym1__));
          current_statement__ = 57;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 58;
      stan::math::validate_non_negative_index("ub_xover", "NLAMBDA - 1",
        (NLAMBDA - 1));
      current_statement__ = 59;
      context__.validate_dims("data initialization", "ub_xover", "double",
        std::vector<size_t>{static_cast<size_t>((NLAMBDA - 1))});
      ub_xover_data__ = Eigen::Matrix<double,-1,1>::Constant((NLAMBDA - 1),
                          std::numeric_limits<double>::quiet_NaN());
      new (&ub_xover)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(ub_xover_data__.data(),
        (NLAMBDA - 1));
      {
        std::vector<local_scalar_t__> ub_xover_flat__;
        current_statement__ = 59;
        ub_xover_flat__ = context__.vals_r("ub_xover");
        current_statement__ = 59;
        pos__ = 1;
        current_statement__ = 59;
        for (int sym1__ = 1; sym1__ <= (NLAMBDA - 1); ++sym1__) {
          current_statement__ = 59;
          stan::model::assign(ub_xover, ub_xover_flat__[(pos__ - 1)],
            "assigning variable ub_xover", stan::model::index_uni(sym1__));
          current_statement__ = 59;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 60;
      stan::math::validate_non_negative_index("x", "NINT", NINT);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("S", "N", N);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("lambda", "NLAMBDA", NLAMBDA);
      current_statement__ = 63;
      x0_raw_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 63;
      x0_raw_1dim__ = (NLAMBDA - 1);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("x0_raw", "NLAMBDA - 1",
        x0_raw_1dim__);
      current_statement__ = 64;
      x0_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 64;
      x0_1dim__ = (NLAMBDA - 1);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("x0", "NLAMBDA - 1", x0_1dim__);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("ta", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = NINT + N + NLAMBDA + 1 + x0_raw_1dim__;
  }
  inline std::string model_name() const final {
    return "model_poisson_tree";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_poisson_tree_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> x =
        std::vector<local_scalar_t__>(NINT, DUMMY_VAR__);
      current_statement__ = 1;
      x = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
            jacobian__>(0.0001, 0.9999, lp__, NINT);
      Eigen::Matrix<local_scalar_t__,-1,1> S =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 2;
      S = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.001, 0.999,
            lp__, N);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NLAMBDA, DUMMY_VAR__);
      current_statement__ = 3;
      lambda = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(1, 200,
                 lp__, NLAMBDA);
      local_scalar_t__ p = DUMMY_VAR__;
      current_statement__ = 4;
      p = in__.template read_constrain_lub<local_scalar_t__,
            jacobian__>(0.05, 0.999, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> x0_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(x0_raw_1dim__,
          DUMMY_VAR__);
      current_statement__ = 5;
      x0_raw = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.00001,
                 0.99999, lp__, x0_raw_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> x0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(x0_1dim__,
          DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(x0,
        stan::math::add(lb_xover,
          stan::math::elt_multiply(stan::math::subtract(ub_xover, lb_xover),
            x0_raw)), "assigning variable x0");
      {
        current_statement__ = 9;
        stan::math::validate_non_negative_index("t", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> t =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 11;
        stan::math::validate_non_negative_index("t0", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> t0 =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 13;
        stan::math::validate_non_negative_index("lambda_per_branch", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> lambda_per_branch =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 15;
        stan::math::validate_non_negative_index("tmp", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> tmp =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 17;
        stan::math::validate_non_negative_index("x0v", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> x0v =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 19;
        stan::model::assign(x0v, stan::math::rep_vector(0.0, N),
          "assigning variable x0v");
        current_statement__ = 20;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(x,
                         stan::math::elt_divide(
                           stan::math::elt_multiply(concentration, q),
                           stan::math::subtract(1, q)), concentration));
        current_statement__ = 21;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(S, 100,
                         stan::math::elt_divide(
                           stan::math::multiply(100,
                             stan::math::subtract(1, s)), s)));
        current_statement__ = 24;
        for (int i = 1; i <= (NLAMBDA - 1); ++i) {
          current_statement__ = 22;
          stan::model::assign(x0v,
            stan::model::rvalue(x0, "x0", stan::model::index_uni(i)),
            "assigning variable x0v",
            stan::model::index_uni(
              stan::model::rvalue(idxcrossover, "idxcrossover",
                stan::model::index_uni(i))));
        }
        current_statement__ = 25;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(lambda, lambda_est,
                         (0.25 * lambda_est)));
        current_statement__ = 26;
        stan::model::assign(t,
          x_to_t(x, parentidx, xidx, tip_min_age, N, pstream__),
          "assigning variable t");
        current_statement__ = 27;
        stan::model::assign(lambda_per_branch,
          stan::math::add(
            stan::math::add(
              stan::math::elt_multiply(stan::math::subtract(1, x0v),
                stan::model::rvalue(lambda, "lambda",
                  stan::model::index_multi(rates))),
              stan::math::elt_multiply(x0v,
                stan::model::rvalue(lambda, "lambda",
                  stan::model::index_multi(ratesp)))),
            stan::math::multiply(early_growth_model_on,
              getExtraLambdaRates(t, parentidx, N, pstream__))),
          "assigning variable lambda_per_branch");
        current_statement__ = 28;
        lp_accum__.add(stan::math::poisson_lpmf<propto__>(m,
                         stan::math::elt_multiply(
                           stan::math::elt_multiply(t, lambda_per_branch), S)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_poisson_tree_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> x =
        std::vector<double>(NINT, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      x = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
            jacobian__>(0.0001, 0.9999, lp__, NINT);
      Eigen::Matrix<double,-1,1> S =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      S = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.001, 0.999,
            lp__, N);
      Eigen::Matrix<double,-1,1> lambda =
        Eigen::Matrix<double,-1,1>::Constant(NLAMBDA,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      lambda = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(1, 200,
                 lp__, NLAMBDA);
      double p = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      p = in__.template read_constrain_lub<local_scalar_t__,
            jacobian__>(0.05, 0.999, lp__);
      Eigen::Matrix<double,-1,1> x0_raw =
        Eigen::Matrix<double,-1,1>::Constant(x0_raw_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      x0_raw = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.00001,
                 0.99999, lp__, x0_raw_1dim__);
      Eigen::Matrix<double,-1,1> x0 =
        Eigen::Matrix<double,-1,1>::Constant(x0_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(x);
      out__.write(S);
      out__.write(lambda);
      out__.write(p);
      out__.write(x0_raw);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 6;
      stan::model::assign(x0,
        stan::math::add(lb_xover,
          stan::math::elt_multiply(stan::math::subtract(ub_xover, lb_xover),
            x0_raw)), "assigning variable x0");
      if (emit_transformed_parameters__) {
        out__.write(x0);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> ta =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      stan::model::assign(ta,
        x_to_t(x, parentidx, xidx, tip_min_age, N, pstream__),
        "assigning variable ta");
      out__.write(ta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> x =
        std::vector<local_scalar_t__>(NINT, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(x, in__.read<std::vector<local_scalar_t__>>(NINT),
        "assigning variable x");
      out__.write_free_lub(0.0001, 0.9999, x);
      Eigen::Matrix<local_scalar_t__,-1,1> S =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(S,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable S");
      out__.write_free_lub(0.001, 0.999, S);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NLAMBDA, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(lambda,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(NLAMBDA),
        "assigning variable lambda");
      out__.write_free_lub(1, 200, lambda);
      local_scalar_t__ p = DUMMY_VAR__;
      current_statement__ = 4;
      p = in__.read<local_scalar_t__>();
      out__.write_free_lub(0.05, 0.999, p);
      Eigen::Matrix<local_scalar_t__,-1,1> x0_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(x0_raw_1dim__,
          DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(x0_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(x0_raw_1dim__),
        "assigning variable x0_raw");
      out__.write_free_lub(0.00001, 0.99999, x0_raw);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(NINT)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "S", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "lambda", "double",
        std::vector<size_t>{static_cast<size_t>(NLAMBDA)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "p", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "x0_raw", "double",
        std::vector<size_t>{static_cast<size_t>(x0_raw_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> x =
        std::vector<local_scalar_t__>(NINT, DUMMY_VAR__);
      current_statement__ = 1;
      x = context__.vals_r("x");
      out__.write_free_lub(0.0001, 0.9999, x);
      Eigen::Matrix<local_scalar_t__,-1,1> S =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> S_flat__;
        current_statement__ = 2;
        S_flat__ = context__.vals_r("S");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(S, S_flat__[(pos__ - 1)],
            "assigning variable S", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0.001, 0.999, S);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NLAMBDA, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> lambda_flat__;
        current_statement__ = 3;
        lambda_flat__ = context__.vals_r("lambda");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= NLAMBDA; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(lambda, lambda_flat__[(pos__ - 1)],
            "assigning variable lambda", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(1, 200, lambda);
      local_scalar_t__ p = DUMMY_VAR__;
      current_statement__ = 4;
      p = context__.vals_r("p")[(1 - 1)];
      out__.write_free_lub(0.05, 0.999, p);
      Eigen::Matrix<local_scalar_t__,-1,1> x0_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(x0_raw_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> x0_raw_flat__;
        current_statement__ = 5;
        x0_raw_flat__ = context__.vals_r("x0_raw");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= x0_raw_1dim__; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(x0_raw, x0_raw_flat__[(pos__ - 1)],
            "assigning variable x0_raw", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0.00001, 0.99999, x0_raw);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"x", "S", "lambda", "p", "x0_raw"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"x0"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"ta"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    NINT)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(NLAMBDA)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(x0_raw_1dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(x0_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= NINT; ++sym1__) {
      param_names__.emplace_back(std::string() + "x" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "S" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= NLAMBDA; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "p");
    for (int sym1__ = 1; sym1__ <= x0_raw_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "x0_raw" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= x0_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "x0" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "ta" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= NINT; ++sym1__) {
      param_names__.emplace_back(std::string() + "x" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "S" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= NLAMBDA; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "p");
    for (int sym1__ = 1; sym1__ <= x0_raw_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "x0_raw" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= x0_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "x0" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "ta" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(NINT) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"S\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NLAMBDA) + "},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x0_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(x0_raw_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"x0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(x0_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(NINT) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"S\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NLAMBDA) + "},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x0_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(x0_raw_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"x0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(x0_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((NINT + N) + NLAMBDA) + 1) +
      x0_raw_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (x0_1dim__);
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((NINT + N) + NLAMBDA) + 1) +
      x0_raw_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (x0_1dim__);
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_poisson_tree_namespace::model_poisson_tree;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_poisson_tree_namespace::profiles__;
}
#endif
#endif
